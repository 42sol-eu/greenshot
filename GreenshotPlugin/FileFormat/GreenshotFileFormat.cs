// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GreenshotFileFormat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Greenshot.FileFormat {

  /// <summary>Holder for reflection information generated from GreenshotFileFormat.proto</summary>
  public static partial class GreenshotFileFormatReflection {

    #region Descriptor
    /// <summary>File descriptor for GreenshotFileFormat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GreenshotFileFormatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlHcmVlbnNob3RGaWxlRm9ybWF0LnByb3RvEglncmVlbnNob3QiBwoFTGF5",
            "ZXIiFQoER1VJRBINCgV2YWx1ZRgBIAEoCSLJAQoIUmVzb3VyY2USGwoCaWQY",
            "ASABKAsyDy5ncmVlbnNob3QuR1VJRBI3CgxyZXNvdXJjZVR5cGUYAiABKA4y",
            "IS5ncmVlbnNob3QuUmVzb3VyY2UuUmVzb3VyY2VUeXBlcxIMCgREYXRhGAMg",
            "ASgMIlkKDVJlc291cmNlVHlwZXMSBwoDUE5HEAASBwoDR0lGEAESBwoDSUNP",
            "EAISCAoEVElGRhADEgcKA0JNUBAEEgcKA0pQRxAFEgcKA1NWRxAGEggKBFhB",
            "TUwQByIdCgVQb2ludBIJCgF4GAEgASgFEgkKAXkYAiABKAUiJQoEU2l6ZRIN",
            "CgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUiTgoJUmVjdGFuZ2xlEiIK",
            "CGxvY2F0aW9uGAEgASgLMhAuZ3JlZW5zaG90LlBvaW50Eh0KBHNpemUYAiAB",
            "KAsyDy5ncmVlbnNob3QuU2l6ZSL0AQoIRHJhd2FibGUSJAoGYm91bmRzGAEg",
            "ASgLMhQuZ3JlZW5zaG90LlJlY3RhbmdsZRIlCghyZXNvdXJjZRgCIAEoCzIT",
            "LmdyZWVuc2hvdC5SZXNvdXJjZRIgCgZ0YXJnZXQYAyADKAsyEC5ncmVlbnNo",
            "b3QuUG9pbnQSNwoMZHJhd2FibGVUeXBlGAQgASgOMiEuZ3JlZW5zaG90LkRy",
            "YXdhYmxlLkRyYXdhYmxlVHlwZXMiQAoNRHJhd2FibGVUeXBlcxIICgRMaW5l",
            "EAASCQoFQXJyb3cQARINCglSZWN0YW5nbGUQAhILCgdFbGxpcHNlEAMiaAoN",
            "R3JlZW5zaG90RmlsZRINCgV0aXRsZRgBIAEoCRImCglyZXNvdXJjZXMYAiAD",
            "KAsyEy5ncmVlbnNob3QuUmVzb3VyY2USIAoGbGF5ZXJzGAMgAygLMhAuZ3Jl",
            "ZW5zaG90LkxheWVyQheqAhRHcmVlbnNob3QuRmlsZUZvcm1hdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Layer), global::Greenshot.FileFormat.Layer.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.GUID), global::Greenshot.FileFormat.GUID.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Resource), global::Greenshot.FileFormat.Resource.Parser, new[]{ "Id", "ResourceType", "Data" }, null, new[]{ typeof(global::Greenshot.FileFormat.Resource.Types.ResourceTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Point), global::Greenshot.FileFormat.Point.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Size), global::Greenshot.FileFormat.Size.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Rectangle), global::Greenshot.FileFormat.Rectangle.Parser, new[]{ "Location", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Drawable), global::Greenshot.FileFormat.Drawable.Parser, new[]{ "Bounds", "Resource", "Target", "DrawableType" }, null, new[]{ typeof(global::Greenshot.FileFormat.Drawable.Types.DrawableTypes) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.GreenshotFile), global::Greenshot.FileFormat.GreenshotFile.Parser, new[]{ "Title", "Resources", "Layers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Layer : pb::IMessage<Layer> {
    private static readonly pb::MessageParser<Layer> _parser = new pb::MessageParser<Layer>(() => new Layer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Layer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Layer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Layer(Layer other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Layer Clone() {
      return new Layer(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Layer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Layer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Layer other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GUID : pb::IMessage<GUID> {
    private static readonly pb::MessageParser<GUID> _parser = new pb::MessageParser<GUID>(() => new GUID());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GUID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GUID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GUID(GUID other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GUID Clone() {
      return new GUID(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GUID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GUID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GUID other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resource : pb::IMessage<Resource> {
    private static readonly pb::MessageParser<Resource> _parser = new pb::MessageParser<Resource>(() => new Resource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource(Resource other) : this() {
      Id = other.id_ != null ? other.Id.Clone() : null;
      resourceType_ = other.resourceType_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resource Clone() {
      return new Resource(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private global::Greenshot.FileFormat.GUID id_;
    /// <summary>
    /// Unique GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.GUID Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "resourceType" field.</summary>
    public const int ResourceTypeFieldNumber = 2;
    private global::Greenshot.FileFormat.Resource.Types.ResourceTypes resourceType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Resource.Types.ResourceTypes ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Id, other.Id)) return false;
      if (ResourceType != other.ResourceType) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (id_ != null) hash ^= Id.GetHashCode();
      if (ResourceType != 0) hash ^= ResourceType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (id_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Id);
      }
      if (ResourceType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ResourceType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (id_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
      }
      if (ResourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResourceType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resource other) {
      if (other == null) {
        return;
      }
      if (other.id_ != null) {
        if (id_ == null) {
          id_ = new global::Greenshot.FileFormat.GUID();
        }
        Id.MergeFrom(other.Id);
      }
      if (other.ResourceType != 0) {
        ResourceType = other.ResourceType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (id_ == null) {
              id_ = new global::Greenshot.FileFormat.GUID();
            }
            input.ReadMessage(id_);
            break;
          }
          case 16: {
            resourceType_ = (global::Greenshot.FileFormat.Resource.Types.ResourceTypes) input.ReadEnum();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Resource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Different types for the resource, which is stored as a stream
      /// </summary>
      public enum ResourceTypes {
        [pbr::OriginalName("PNG")] Png = 0,
        [pbr::OriginalName("GIF")] Gif = 1,
        [pbr::OriginalName("ICO")] Ico = 2,
        [pbr::OriginalName("TIFF")] Tiff = 3,
        [pbr::OriginalName("BMP")] Bmp = 4,
        [pbr::OriginalName("JPG")] Jpg = 5,
        [pbr::OriginalName("SVG")] Svg = 6,
        [pbr::OriginalName("XAML")] Xaml = 7,
      }

    }
    #endregion

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      x_ = other.x_;
      y_ = other.y_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Size : pb::IMessage<Size> {
    private static readonly pb::MessageParser<Size> _parser = new pb::MessageParser<Size>(() => new Size());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Size> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size(Size other) : this() {
      width_ = other.width_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Size Clone() {
      return new Size(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Size);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Size other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Size other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rectangle : pb::IMessage<Rectangle> {
    private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle(Rectangle other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      Size = other.size_ != null ? other.Size.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rectangle Clone() {
      return new Rectangle(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Greenshot.FileFormat.Point location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Point Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private global::Greenshot.FileFormat.Size size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Size Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rectangle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rectangle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Size, other.Size)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (size_ != null) hash ^= Size.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (size_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (size_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rectangle other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Greenshot.FileFormat.Point();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.size_ != null) {
        if (size_ == null) {
          size_ = new global::Greenshot.FileFormat.Size();
        }
        Size.MergeFrom(other.Size);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Greenshot.FileFormat.Point();
            }
            input.ReadMessage(location_);
            break;
          }
          case 18: {
            if (size_ == null) {
              size_ = new global::Greenshot.FileFormat.Size();
            }
            input.ReadMessage(size_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Drawable : pb::IMessage<Drawable> {
    private static readonly pb::MessageParser<Drawable> _parser = new pb::MessageParser<Drawable>(() => new Drawable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Drawable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Drawable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Drawable(Drawable other) : this() {
      Bounds = other.bounds_ != null ? other.Bounds.Clone() : null;
      Resource = other.resource_ != null ? other.Resource.Clone() : null;
      target_ = other.target_.Clone();
      drawableType_ = other.drawableType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Drawable Clone() {
      return new Drawable(this);
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 1;
    private global::Greenshot.FileFormat.Rectangle bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Rectangle Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "resource" field.</summary>
    public const int ResourceFieldNumber = 2;
    private global::Greenshot.FileFormat.Resource resource_;
    /// <summary>
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Resource Resource {
      get { return resource_; }
      set {
        resource_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Greenshot.FileFormat.Point> _repeated_target_codec
        = pb::FieldCodec.ForMessage(26, global::Greenshot.FileFormat.Point.Parser);
    private readonly pbc::RepeatedField<global::Greenshot.FileFormat.Point> target_ = new pbc::RepeatedField<global::Greenshot.FileFormat.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Greenshot.FileFormat.Point> Target {
      get { return target_; }
    }

    /// <summary>Field number for the "drawableType" field.</summary>
    public const int DrawableTypeFieldNumber = 4;
    private global::Greenshot.FileFormat.Drawable.Types.DrawableTypes drawableType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Drawable.Types.DrawableTypes DrawableType {
      get { return drawableType_; }
      set {
        drawableType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Drawable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Drawable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (!object.Equals(Resource, other.Resource)) return false;
      if(!target_.Equals(other.target_)) return false;
      if (DrawableType != other.DrawableType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (resource_ != null) hash ^= Resource.GetHashCode();
      hash ^= target_.GetHashCode();
      if (DrawableType != 0) hash ^= DrawableType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bounds);
      }
      if (resource_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resource);
      }
      target_.WriteTo(output, _repeated_target_codec);
      if (DrawableType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DrawableType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (resource_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resource);
      }
      size += target_.CalculateSize(_repeated_target_codec);
      if (DrawableType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DrawableType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Drawable other) {
      if (other == null) {
        return;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          bounds_ = new global::Greenshot.FileFormat.Rectangle();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.resource_ != null) {
        if (resource_ == null) {
          resource_ = new global::Greenshot.FileFormat.Resource();
        }
        Resource.MergeFrom(other.Resource);
      }
      target_.Add(other.target_);
      if (other.DrawableType != 0) {
        DrawableType = other.DrawableType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bounds_ == null) {
              bounds_ = new global::Greenshot.FileFormat.Rectangle();
            }
            input.ReadMessage(bounds_);
            break;
          }
          case 18: {
            if (resource_ == null) {
              resource_ = new global::Greenshot.FileFormat.Resource();
            }
            input.ReadMessage(resource_);
            break;
          }
          case 26: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
          case 32: {
            drawableType_ = (global::Greenshot.FileFormat.Drawable.Types.DrawableTypes) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Drawable message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DrawableTypes {
        [pbr::OriginalName("Line")] Line = 0,
        [pbr::OriginalName("Arrow")] Arrow = 1,
        [pbr::OriginalName("Rectangle")] Rectangle = 2,
        [pbr::OriginalName("Ellipse")] Ellipse = 3,
      }

    }
    #endregion

  }

  public sealed partial class GreenshotFile : pb::IMessage<GreenshotFile> {
    private static readonly pb::MessageParser<GreenshotFile> _parser = new pb::MessageParser<GreenshotFile>(() => new GreenshotFile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GreenshotFile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.GreenshotFileFormatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GreenshotFile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GreenshotFile(GreenshotFile other) : this() {
      title_ = other.title_;
      resources_ = other.resources_.Clone();
      layers_ = other.layers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GreenshotFile Clone() {
      return new GreenshotFile(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Greenshot.FileFormat.Resource> _repeated_resources_codec
        = pb::FieldCodec.ForMessage(18, global::Greenshot.FileFormat.Resource.Parser);
    private readonly pbc::RepeatedField<global::Greenshot.FileFormat.Resource> resources_ = new pbc::RepeatedField<global::Greenshot.FileFormat.Resource>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Greenshot.FileFormat.Resource> Resources {
      get { return resources_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Greenshot.FileFormat.Layer> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(26, global::Greenshot.FileFormat.Layer.Parser);
    private readonly pbc::RepeatedField<global::Greenshot.FileFormat.Layer> layers_ = new pbc::RepeatedField<global::Greenshot.FileFormat.Layer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Greenshot.FileFormat.Layer> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GreenshotFile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GreenshotFile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if(!resources_.Equals(other.resources_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      hash ^= resources_.GetHashCode();
      hash ^= layers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      resources_.WriteTo(output, _repeated_resources_codec);
      layers_.WriteTo(output, _repeated_layers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      size += resources_.CalculateSize(_repeated_resources_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GreenshotFile other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      resources_.Add(other.resources_);
      layers_.Add(other.layers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            resources_.AddEntriesFrom(input, _repeated_resources_codec);
            break;
          }
          case 26: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
