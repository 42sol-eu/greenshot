// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Shapes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Greenshot.FileFormat {

  /// <summary>Holder for reflection information generated from Shapes.proto</summary>
  public static partial class ShapesReflection {

    #region Descriptor
    /// <summary>File descriptor for Shapes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ShapesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxTaGFwZXMucHJvdG8SFGdyZWVuc2hvdC5maWxlZm9ybWF0Gg9CYXNlVHlw",
            "ZXMucHJvdG8aC1N0eWxlLnByb3RvIh8KBkZpbHRlciIVCgdGaWx0ZXJzEgoK",
            "BlNoYWRvdxAAIl0KCUxpbmVTaGFwZRInCgJwMRgBIAEoCzIbLmdyZWVuc2hv",
            "dC5maWxlZm9ybWF0LlBvaW50EicKAnAyGAIgASgLMhsuZ3JlZW5zaG90LmZp",
            "bGVmb3JtYXQuUG9pbnQiXgoKQXJyb3dTaGFwZRInCgJwMRgBIAEoCzIbLmdy",
            "ZWVuc2hvdC5maWxlZm9ybWF0LlBvaW50EicKAnAyGAIgASgLMhsuZ3JlZW5z",
            "aG90LmZpbGVmb3JtYXQuUG9pbnQiTgoKSW1hZ2VTaGFwZRIsCgZib3VuZHMY",
            "ASABKAsyHC5ncmVlbnNob3QuZmlsZWZvcm1hdC5Cb3VuZHMSEgoKcmVzb3Vy",
            "Y2VJZBgCIAEoCSKmAQoKU2hhcGVTdHlsZRIrCgZzdHJva2UYASABKAsyGy5n",
            "cmVlbnNob3QuZmlsZWZvcm1hdC5Db2xvchIXCg9zdHJva2VUaGlja25lc3MY",
            "AiABKAISFwoPc3Ryb2tlRGFzaEFycmF5GAMgAygCIjkKCExpbmVDYXBzEggK",
            "BEZsYXQQABIJCgVSb3VuZBABEgoKBlNxdWFyZRACEgwKCFRyaWFuZ2xlEAMi",
            "5wEKBVNoYXBlEhQKDHNoYXBlU3R5bGVJZBgBIAEoCRIsCgZtYXRyaXgYAiAB",
            "KAsyHC5ncmVlbnNob3QuZmlsZWZvcm1hdC5NYXRyaXgSLQoHZmlsdGVycxgD",
            "IAMoCzIcLmdyZWVuc2hvdC5maWxlZm9ybWF0LkZpbHRlchIvCgRsaW5lGAog",
            "ASgLMh8uZ3JlZW5zaG90LmZpbGVmb3JtYXQuTGluZVNoYXBlSAASMQoFYXJy",
            "b3cYCyABKAsyIC5ncmVlbnNob3QuZmlsZWZvcm1hdC5BcnJvd1NoYXBlSABC",
            "BwoFc2hhcGUqKgoGU2hhcGVzEggKBExpbmUQABIJCgVBcnJvdxABEgsKB0Vs",
            "bGlwc2UQAkIXqgIUR3JlZW5zaG90LkZpbGVGb3JtYXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Greenshot.FileFormat.BaseTypesReflection.Descriptor, global::Greenshot.FileFormat.StyleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Greenshot.FileFormat.Shapes), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Filter), global::Greenshot.FileFormat.Filter.Parser, null, null, new[]{ typeof(global::Greenshot.FileFormat.Filter.Types.Filters) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.LineShape), global::Greenshot.FileFormat.LineShape.Parser, new[]{ "P1", "P2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.ArrowShape), global::Greenshot.FileFormat.ArrowShape.Parser, new[]{ "P1", "P2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.ImageShape), global::Greenshot.FileFormat.ImageShape.Parser, new[]{ "Bounds", "ResourceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.ShapeStyle), global::Greenshot.FileFormat.ShapeStyle.Parser, new[]{ "Stroke", "StrokeThickness", "StrokeDashArray" }, null, new[]{ typeof(global::Greenshot.FileFormat.ShapeStyle.Types.LineCaps) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Greenshot.FileFormat.Shape), global::Greenshot.FileFormat.Shape.Parser, new[]{ "ShapeStyleId", "Matrix", "Filters", "Line", "Arrow" }, new[]{ "Shape" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  //// Enum with all possible shapes
  /// </summary>
  public enum Shapes {
    [pbr::OriginalName("Line")] Line = 0,
    [pbr::OriginalName("Arrow")] Arrow = 1,
    [pbr::OriginalName("Ellipse")] Ellipse = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Filter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Filters {
        [pbr::OriginalName("Shadow")] Shadow = 0,
      }

    }
    #endregion

  }

  public sealed partial class LineShape : pb::IMessage<LineShape> {
    private static readonly pb::MessageParser<LineShape> _parser = new pb::MessageParser<LineShape>(() => new LineShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineShape(LineShape other) : this() {
      P1 = other.p1_ != null ? other.P1.Clone() : null;
      P2 = other.p2_ != null ? other.P2.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineShape Clone() {
      return new LineShape(this);
    }

    /// <summary>Field number for the "p1" field.</summary>
    public const int P1FieldNumber = 1;
    private global::Greenshot.FileFormat.Point p1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Point P1 {
      get { return p1_; }
      set {
        p1_ = value;
      }
    }

    /// <summary>Field number for the "p2" field.</summary>
    public const int P2FieldNumber = 2;
    private global::Greenshot.FileFormat.Point p2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Point P2 {
      get { return p2_; }
      set {
        p2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P1, other.P1)) return false;
      if (!object.Equals(P2, other.P2)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p1_ != null) hash ^= P1.GetHashCode();
      if (p2_ != null) hash ^= P2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (p1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P1);
      }
      if (p2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
      }
      if (p2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineShape other) {
      if (other == null) {
        return;
      }
      if (other.p1_ != null) {
        if (p1_ == null) {
          p1_ = new global::Greenshot.FileFormat.Point();
        }
        P1.MergeFrom(other.P1);
      }
      if (other.p2_ != null) {
        if (p2_ == null) {
          p2_ = new global::Greenshot.FileFormat.Point();
        }
        P2.MergeFrom(other.P2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (p1_ == null) {
              p1_ = new global::Greenshot.FileFormat.Point();
            }
            input.ReadMessage(p1_);
            break;
          }
          case 18: {
            if (p2_ == null) {
              p2_ = new global::Greenshot.FileFormat.Point();
            }
            input.ReadMessage(p2_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArrowShape : pb::IMessage<ArrowShape> {
    private static readonly pb::MessageParser<ArrowShape> _parser = new pb::MessageParser<ArrowShape>(() => new ArrowShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArrowShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrowShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrowShape(ArrowShape other) : this() {
      P1 = other.p1_ != null ? other.P1.Clone() : null;
      P2 = other.p2_ != null ? other.P2.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArrowShape Clone() {
      return new ArrowShape(this);
    }

    /// <summary>Field number for the "p1" field.</summary>
    public const int P1FieldNumber = 1;
    private global::Greenshot.FileFormat.Point p1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Point P1 {
      get { return p1_; }
      set {
        p1_ = value;
      }
    }

    /// <summary>Field number for the "p2" field.</summary>
    public const int P2FieldNumber = 2;
    private global::Greenshot.FileFormat.Point p2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Point P2 {
      get { return p2_; }
      set {
        p2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArrowShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArrowShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P1, other.P1)) return false;
      if (!object.Equals(P2, other.P2)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p1_ != null) hash ^= P1.GetHashCode();
      if (p2_ != null) hash ^= P2.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (p1_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P1);
      }
      if (p2_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
      }
      if (p2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P2);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArrowShape other) {
      if (other == null) {
        return;
      }
      if (other.p1_ != null) {
        if (p1_ == null) {
          p1_ = new global::Greenshot.FileFormat.Point();
        }
        P1.MergeFrom(other.P1);
      }
      if (other.p2_ != null) {
        if (p2_ == null) {
          p2_ = new global::Greenshot.FileFormat.Point();
        }
        P2.MergeFrom(other.P2);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (p1_ == null) {
              p1_ = new global::Greenshot.FileFormat.Point();
            }
            input.ReadMessage(p1_);
            break;
          }
          case 18: {
            if (p2_ == null) {
              p2_ = new global::Greenshot.FileFormat.Point();
            }
            input.ReadMessage(p2_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// An image shape
  /// </summary>
  public sealed partial class ImageShape : pb::IMessage<ImageShape> {
    private static readonly pb::MessageParser<ImageShape> _parser = new pb::MessageParser<ImageShape>(() => new ImageShape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageShape(ImageShape other) : this() {
      Bounds = other.bounds_ != null ? other.Bounds.Clone() : null;
      resourceId_ = other.resourceId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageShape Clone() {
      return new ImageShape(this);
    }

    /// <summary>Field number for the "bounds" field.</summary>
    public const int BoundsFieldNumber = 1;
    private global::Greenshot.FileFormat.Bounds bounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Bounds Bounds {
      get { return bounds_; }
      set {
        bounds_ = value;
      }
    }

    /// <summary>Field number for the "resourceId" field.</summary>
    public const int ResourceIdFieldNumber = 2;
    private string resourceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceId {
      get { return resourceId_; }
      set {
        resourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bounds, other.Bounds)) return false;
      if (ResourceId != other.ResourceId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bounds_ != null) hash ^= Bounds.GetHashCode();
      if (ResourceId.Length != 0) hash ^= ResourceId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bounds_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bounds);
      }
      if (ResourceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bounds_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bounds);
      }
      if (ResourceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageShape other) {
      if (other == null) {
        return;
      }
      if (other.bounds_ != null) {
        if (bounds_ == null) {
          bounds_ = new global::Greenshot.FileFormat.Bounds();
        }
        Bounds.MergeFrom(other.Bounds);
      }
      if (other.ResourceId.Length != 0) {
        ResourceId = other.ResourceId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bounds_ == null) {
              bounds_ = new global::Greenshot.FileFormat.Bounds();
            }
            input.ReadMessage(bounds_);
            break;
          }
          case 18: {
            ResourceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Basic style information for every shape
  /// </summary>
  public sealed partial class ShapeStyle : pb::IMessage<ShapeStyle> {
    private static readonly pb::MessageParser<ShapeStyle> _parser = new pb::MessageParser<ShapeStyle>(() => new ShapeStyle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShapeStyle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeStyle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeStyle(ShapeStyle other) : this() {
      Stroke = other.stroke_ != null ? other.Stroke.Clone() : null;
      strokeThickness_ = other.strokeThickness_;
      strokeDashArray_ = other.strokeDashArray_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeStyle Clone() {
      return new ShapeStyle(this);
    }

    /// <summary>Field number for the "stroke" field.</summary>
    public const int StrokeFieldNumber = 1;
    private global::Greenshot.FileFormat.Color stroke_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Color Stroke {
      get { return stroke_; }
      set {
        stroke_ = value;
      }
    }

    /// <summary>Field number for the "strokeThickness" field.</summary>
    public const int StrokeThicknessFieldNumber = 2;
    private float strokeThickness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StrokeThickness {
      get { return strokeThickness_; }
      set {
        strokeThickness_ = value;
      }
    }

    /// <summary>Field number for the "strokeDashArray" field.</summary>
    public const int StrokeDashArrayFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_strokeDashArray_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> strokeDashArray_ = new pbc::RepeatedField<float>();
    /// <summary>
    //// Used to specify the dash and space values for the stroke being drawed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> StrokeDashArray {
      get { return strokeDashArray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShapeStyle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShapeStyle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Stroke, other.Stroke)) return false;
      if (StrokeThickness != other.StrokeThickness) return false;
      if(!strokeDashArray_.Equals(other.strokeDashArray_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stroke_ != null) hash ^= Stroke.GetHashCode();
      if (StrokeThickness != 0F) hash ^= StrokeThickness.GetHashCode();
      hash ^= strokeDashArray_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stroke_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Stroke);
      }
      if (StrokeThickness != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(StrokeThickness);
      }
      strokeDashArray_.WriteTo(output, _repeated_strokeDashArray_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stroke_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stroke);
      }
      if (StrokeThickness != 0F) {
        size += 1 + 4;
      }
      size += strokeDashArray_.CalculateSize(_repeated_strokeDashArray_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShapeStyle other) {
      if (other == null) {
        return;
      }
      if (other.stroke_ != null) {
        if (stroke_ == null) {
          stroke_ = new global::Greenshot.FileFormat.Color();
        }
        Stroke.MergeFrom(other.Stroke);
      }
      if (other.StrokeThickness != 0F) {
        StrokeThickness = other.StrokeThickness;
      }
      strokeDashArray_.Add(other.strokeDashArray_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stroke_ == null) {
              stroke_ = new global::Greenshot.FileFormat.Color();
            }
            input.ReadMessage(stroke_);
            break;
          }
          case 21: {
            StrokeThickness = input.ReadFloat();
            break;
          }
          case 26:
          case 29: {
            strokeDashArray_.AddEntriesFrom(input, _repeated_strokeDashArray_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ShapeStyle message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      //// Possible caps for the line
      /// </summary>
      public enum LineCaps {
        [pbr::OriginalName("Flat")] Flat = 0,
        [pbr::OriginalName("Round")] Round = 1,
        [pbr::OriginalName("Square")] Square = 2,
        [pbr::OriginalName("Triangle")] Triangle = 3,
      }

    }
    #endregion

  }

  public sealed partial class Shape : pb::IMessage<Shape> {
    private static readonly pb::MessageParser<Shape> _parser = new pb::MessageParser<Shape>(() => new Shape());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Greenshot.FileFormat.ShapesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape(Shape other) : this() {
      shapeStyleId_ = other.shapeStyleId_;
      Matrix = other.matrix_ != null ? other.Matrix.Clone() : null;
      filters_ = other.filters_.Clone();
      switch (other.ShapeCase) {
        case ShapeOneofCase.Line:
          Line = other.Line.Clone();
          break;
        case ShapeOneofCase.Arrow:
          Arrow = other.Arrow.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shape Clone() {
      return new Shape(this);
    }

    /// <summary>Field number for the "shapeStyleId" field.</summary>
    public const int ShapeStyleIdFieldNumber = 1;
    private string shapeStyleId_ = "";
    /// <summary>
    /// GUID of the style for the shape, can be found in the styles map
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShapeStyleId {
      get { return shapeStyleId_; }
      set {
        shapeStyleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "matrix" field.</summary>
    public const int MatrixFieldNumber = 2;
    private global::Greenshot.FileFormat.Matrix matrix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.Matrix Matrix {
      get { return matrix_; }
      set {
        matrix_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Greenshot.FileFormat.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Greenshot.FileFormat.Filter.Parser);
    private readonly pbc::RepeatedField<global::Greenshot.FileFormat.Filter> filters_ = new pbc::RepeatedField<global::Greenshot.FileFormat.Filter>();
    /// <summary>
    //// Used to specify which filters are used when drawing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Greenshot.FileFormat.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.LineShape Line {
      get { return shapeCase_ == ShapeOneofCase.Line ? (global::Greenshot.FileFormat.LineShape) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Line;
      }
    }

    /// <summary>Field number for the "arrow" field.</summary>
    public const int ArrowFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Greenshot.FileFormat.ArrowShape Arrow {
      get { return shapeCase_ == ShapeOneofCase.Arrow ? (global::Greenshot.FileFormat.ArrowShape) shape_ : null; }
      set {
        shape_ = value;
        shapeCase_ = value == null ? ShapeOneofCase.None : ShapeOneofCase.Arrow;
      }
    }

    private object shape_;
    /// <summary>Enum of possible cases for the "shape" oneof.</summary>
    public enum ShapeOneofCase {
      None = 0,
      Line = 10,
      Arrow = 11,
    }
    private ShapeOneofCase shapeCase_ = ShapeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShapeOneofCase ShapeCase {
      get { return shapeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShape() {
      shapeCase_ = ShapeOneofCase.None;
      shape_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShapeStyleId != other.ShapeStyleId) return false;
      if (!object.Equals(Matrix, other.Matrix)) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (!object.Equals(Line, other.Line)) return false;
      if (!object.Equals(Arrow, other.Arrow)) return false;
      if (ShapeCase != other.ShapeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShapeStyleId.Length != 0) hash ^= ShapeStyleId.GetHashCode();
      if (matrix_ != null) hash ^= Matrix.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Line) hash ^= Line.GetHashCode();
      if (shapeCase_ == ShapeOneofCase.Arrow) hash ^= Arrow.GetHashCode();
      hash ^= (int) shapeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShapeStyleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ShapeStyleId);
      }
      if (matrix_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Matrix);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (shapeCase_ == ShapeOneofCase.Line) {
        output.WriteRawTag(82);
        output.WriteMessage(Line);
      }
      if (shapeCase_ == ShapeOneofCase.Arrow) {
        output.WriteRawTag(90);
        output.WriteMessage(Arrow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShapeStyleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShapeStyleId);
      }
      if (matrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Matrix);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (shapeCase_ == ShapeOneofCase.Line) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Line);
      }
      if (shapeCase_ == ShapeOneofCase.Arrow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrow);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shape other) {
      if (other == null) {
        return;
      }
      if (other.ShapeStyleId.Length != 0) {
        ShapeStyleId = other.ShapeStyleId;
      }
      if (other.matrix_ != null) {
        if (matrix_ == null) {
          matrix_ = new global::Greenshot.FileFormat.Matrix();
        }
        Matrix.MergeFrom(other.Matrix);
      }
      filters_.Add(other.filters_);
      switch (other.ShapeCase) {
        case ShapeOneofCase.Line:
          Line = other.Line;
          break;
        case ShapeOneofCase.Arrow:
          Arrow = other.Arrow;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ShapeStyleId = input.ReadString();
            break;
          }
          case 18: {
            if (matrix_ == null) {
              matrix_ = new global::Greenshot.FileFormat.Matrix();
            }
            input.ReadMessage(matrix_);
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 82: {
            global::Greenshot.FileFormat.LineShape subBuilder = new global::Greenshot.FileFormat.LineShape();
            if (shapeCase_ == ShapeOneofCase.Line) {
              subBuilder.MergeFrom(Line);
            }
            input.ReadMessage(subBuilder);
            Line = subBuilder;
            break;
          }
          case 90: {
            global::Greenshot.FileFormat.ArrowShape subBuilder = new global::Greenshot.FileFormat.ArrowShape();
            if (shapeCase_ == ShapeOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
